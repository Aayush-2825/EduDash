// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)

  accounts       Account[]
  teacherClasses TeacherClass[]   @relation("TeacherClasses")
  studentClasses Class[]          @relation("StudentClass")
  questions      Question[]
  submissions    TestSubmission[]
  testsCreated   Test[]           @relation("CreatedTests")

  files File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Class {
  id          String         @id @default(cuid())
  name        String
  description String?
  students    User[]         @relation("StudentClass")
  subjects    Subject[]
  teachers    TeacherClass[]
  tests       Test[]
  code        String         @unique
}

model Subject {
  id        String     @id @default(cuid())
  name      String
  classId   String
  class     Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  files     File[]
  tests     Test[]
  questions Question[]
}

model File {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String
  fileType  FileType
  publicId  String
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum FileType {
  IMAGE
  VIDEO
  NOTE
}

model TeacherClass {
  id        String @id @default(cuid())
  teacherId String
  classId   String
  // teacher   User     @relation(fields: [teacherId], references: [id])
  teacher   User   @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: Cascade)

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Test {
  id        String   @id @default(cuid())
  title     String
  duration  Int // in minutes
  classId   String
  subjectId String
  createdBy String
  createdAt DateTime @default(now())

  class       Class            @relation(fields: [classId], references: [id])
  subject     Subject          @relation(fields: [subjectId], references: [id])
  teacher     User             @relation("CreatedTests", fields: [createdBy], references: [id])
  questions   TestQuestion[]
  submissions TestSubmission[]
}

model TestQuestion {
  id         String @id @default(cuid())
  testId     String
  questionId String

  test     Test     @relation(fields: [testId], references: [id])
  question Question @relation(fields: [questionId], references: [id])
}

model Question {
  id        String         @id @default(cuid())
  type      QuestionType
  source    QuestionSource
  subjectId String
  createdBy String? // null = PYQ

  question String
  optionA  String?
  optionB  String?
  optionC  String?
  optionD  String?
  correct  String

  year      Int?
  exam      ExamType?
  createdAt DateTime  @default(now())

  subject Subject        @relation(fields: [subjectId], references: [id])
  teacher User?          @relation(fields: [createdBy], references: [id])
  tests   TestQuestion[]
}

model TestSubmission {
  id          String    @id @default(cuid())
  studentId   String
  testId      String
  answers     Json
  score       Int
  startedAt   DateTime  @default(now())
  submittedAt DateTime?

  student User @relation(fields: [studentId], references: [id])
  test    Test @relation(fields: [testId], references: [id])
}

enum QuestionType {
  SINGLE_CORRECT
  MULTI_CORRECT
  INTEGER
  NUMERIC
}

enum QuestionSource {
  PYQ
  CUSTOM
}

enum ExamType {
  JEE_MAIN
  JEE_ADVANCED
  NEET
}
