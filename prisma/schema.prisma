// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)

  accounts       Account[]
  teacherClasses TeacherClass[] @relation("TeacherClasses")
  studentClasses Class[]        @relation("StudentClass")

  lectures Lecture[]
  notes    Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Class {
  id          String         @id @default(cuid())
  name        String
  description String?
  students    User[]         @relation("StudentClass")
  subjects    Subject[]
  teachers    TeacherClass[]
  code   String         @unique
}

model Subject {
  id       String    @id @default(cuid())
  name     String
  classId  String
  class    Class     @relation(fields: [classId], references: [id])
  lectures Lecture[]
  notes    Note[]
}

model Lecture {
  id        String   @id @default(cuid())
  title     String
  videoUrl  String
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id]) 
  createdAt DateTime @default(now())
}

model Note {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id])
  createdAt DateTime @default(now())
}

model TeacherClass {
  id        String @id @default(cuid())
  teacherId String
  classId   String
  // teacher   User     @relation(fields: [teacherId], references: [id])
  teacher   User   @relation("TeacherClasses", fields: [teacherId], references: [id])

  class Class @relation(fields: [classId], references: [id])
}
